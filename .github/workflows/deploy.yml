name: Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - Production build
    types:
      - completed

jobs:
  deploy:
    env:
      IMAGE_TAG: latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Clean up resources'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az container delete \
              --name harden \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --yes
            az acr delete \
              --name ${{ secrets.REGISTRY_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --yes

      - name: 'Creare azure container registry'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az acr create --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.REGISTRY_NAME }} --sku Basic
            registryId=$(az acr show \
              --name ${{ secrets.REGISTRY_NAME }} \
              --query id --output tsv)
            az role assignment create \
              --assignee ${{ secrets.REGISTRY_USERNAME }} \
              --scope $registryId \
              --role AcrPush

      - name: 'Login to azure container registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 'Build and push nginx image'
        run: |
          cd src/nginx
          az storage file download --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} --share-name nginx-config --path fullchain.pem
          az storage file download --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} --share-name nginx-config --path privkey.pem
          docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/nginx:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/nginx:${{ env.IMAGE_TAG }}

      - name: 'Build and push backend image'
        run: |
          cd src/backend
          docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend:${{ env.IMAGE_TAG }}

      - name: 'Deploy to Azure Container Instances'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            sed -i "s/{{ DB_HOSTNAME }}/${{ secrets.DB_HOSTNAME }}/; \
                    s/{{ DB_PORT }}/${{ secrets.DB_PORT }}/; \
                    s/{{ DB_USERNAME }}/${{ secrets.DB_USERNAME }}/; \
                    s/{{ DB_PASSWORD }}/${{ secrets.DB_PASSWORD }}/; \
                    s/{{ DB_DATABASE }}/${{ secrets.DB_DATABASE }}/; \
                    s/{{ DNS_NAME_LABEL }}/${{ secrets.RESOURCE_GROUP }}/; \
                    s/{{ IMAGE_TAG }}/${{ env.IMAGE_TAG }}/; \
                    s/{{ REGISTRY_NAME }}/${{ secrets.REGISTRY_NAME }}/; \
                    s/{{ REGISTRY_USERNAME }}/${{ secrets.REGISTRY_USERNAME }}/; \
                    s/{{ REGISTRY_PASSWORD }}/${{ secrets.REGISTRY_PASSWORD }}/; \
                    s/{{ STORAGE_ACCOUNT_NAME }}/${{ secrets.STORAGE_ACCOUNT_NAME }}/; \
                    s/{{ STORAGE_ACCOUNT_KEY }}/${{ secrets.STORAGE_ACCOUNT_KEY }}/;" aci.yaml
            az container create --resource-group ${{ secrets.RESOURCE_GROUP }} --file aci.yaml
